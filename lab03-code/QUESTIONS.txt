                           __________________

                            LAB 03 QUESTIONS
                           __________________


- Name: (FILL THIS in)
- NetID: (THE kauf0095 IN kauf0095@umn.edu)

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete the
lab.


PROBLEM 1: Number conversions
=============================

A
~

  Fill in the following table of equivalences.  Filling in the table
  from top to bottom is advantageous as earlier rows can sometimes be
  used to infer lower values. Feel free to make use of any ASCII table
  or the table.c program provided in the week 3 lecture code pack.

  ,----
  | |-----+------+-----+-----------+--------------|
  | | Dec | Hex  | Oct | Binary    | Char         |
  | |-----+------+-----+-----------+--------------|
  | |   9 | 0x09 |  11 | 0000 1001 | TAB          |
  | |  10 | 0xA  |  20 | 0010 0000 | \n (newline) |
  | |  32 | 0x20 |  40 | 0010 0000 | SPACE        |
  | |  50 | 0x32 |  62 | 0011 0010 | 2            |
  | |  65 | 0x41 | 101 | 0100 0001 | A            |
  | |  66 | 0x42 | 102 | 0100 0010 | B            |
  | |  79 | 0x4F | 117 | 0100 1111 | O            |
  | |  80 | 0x50 | 120 | 0101 0000 | P            |
  | |  91 | 0x5B | 133 | 0101 1011 | [            |
  | |  97 | 0x61 | 141 | 0110 0001 | a            |
  | | 122 | 0x7A | 172 | 0111 1010 | z            |
  | | 145 | 0x91 | 221 | 1001 0001 | none         |
  | | 160 | 0xA0 | 240 | 1010 0000 | none         |
  | | 180 | 0xB4 | 264 | 1011 0100 | none         |
  | | 255 | 0xFF | 377 | 1111 1111 | none         |
  | |-----+------+-----+-----------+--------------|
  `----


B
~

  Fill in the bits, hex, and decimal values for the given examples. The
  first example is completed for you. Assume all of these are 32 bit
  unsigned integers.
  ,----
  |   COMPLETED
  |   Binary:   0000 0000  0000 0000  0001 1000  1110 1001  
  |             0    0     0    0     1    8     E    9
  |   Hex   :   0018E9
  |   Decimal:  6377
  | 
  | 
  |   NUMBER 1
  |   Binary:   0000 0000  0010 1111  0011 1010  1000 1101  
  |             0    0     2    F     3    A     8    D
  |   Hex   :   002F3A8D
  |   Decimal:  3095181
  | 
  | 
  |   NUMBER 2
  |   Binary:   0111 1111  1000 0011 0101 1010 0000  1011 
  |             7    F     8    3     5    A     0    B
  |   Hex   :   7F835A0B
  |   Decimal:  2139314699
  `----


PROBLEM 2: Signed Integer Conversions
=====================================

A
~

  Apply the steps involved in converting the following positive binary
  number to it's two's complement negation in 8-bit signed
  format. Recall the steps are
  - Invert the bits
  - Add one
  Apply these steps to the following number:
  ,----
  | 0111 1100  = 0x7C = 124 (decimal)
  `----
  The result is the two's complement representation of -124.

  Convert back to positive via the same process
  - Invert the bits
  - Add one
  to show that the original bits are gotten back.
	

B
~

  Complete the following table of equivalences assuming 8-bit
  twos-complement signed integers. The rightmost column is the inverse
  of the binary representation: flip 1's to 0's, and vice versa.

  ,----
  | |------+------+-----------+-----------|
  | |  Dec |  Hex | Binary    | Inverse   |
  | |------+------+-----------+-----------|
  | |   +5 | 0x05 | 0000 0101 | 1111 1010 |
  | |   -5 |    ? | 1111 1011 | 0000 0100 |
  | |  +32 | 0x20 | 0010 0000 | 1101 1111 |
  | |  -32 | 0xE0 | 1110 0000 | 0001 1111 |
  | | +127 | 0x7F | 0111 1111 | 1000 0000 |
  | | -127 | 0x81 | 1000 0001 | 0111 1110 |
  | | -128 | 0x80 | 1000 0000 | 0111 1111 |
  | |   +2 | 0x02 | 0000 0010 | 1111 1101 |
  | |   -2 | 0xFE | 1111 1110 | 0000 0001 |
  | |   +1 | 0x01 | 0000 0001 | 1111 1110 |
  | |   -1 | 0xFF | 1111 1111 | 0000 0000 |
  | |    0 | 0x00 | 0000 0000 | 1111 1111 |
  | |------+------+-----------+-----------|
  `----


PROBLEM 3: Converting Strings to Numbers
========================================

  Inspect the program in the lab pack called `convert.c'.  Compile and
  run it using
  ,----
  | > gcc convert.c
  | > ./a.out
  `----
  Describe briefly what kind of conversion is being done by the
  `convert()' function given.
  - A. What kind of data is input?
	An string is the input
  - B. What result is produced by the function?
	it prints out the string as an int
  - C. How is a success versus an error reported?
	If there is a valid number it will convert the string to an int.
	If it is a char or there is a negative sign in the middle of the
	string, it will give an error.
  - D. Why is this kind of conversion needed?
	So that when you type in a number it will convert that string into 
	an int to use in arithmatic and what not.
  - E. What built-in C function (useful for the assignment) does this
    conversion function use and how is its calling convention different
    from convert()?
	Scanf converts what the user inputs and it is different from convert
	because covert uses what is already stored in the file and scanf
	takes the user input.
	
