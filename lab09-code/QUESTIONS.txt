                           __________________

                            LAB 09 QUESTIONS
                           __________________


- Name: Jack Kraemer
- NetID: kraem098

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete the
lab.


Important: Don't Run on Vole
============================

  Vole is a virtualized environment which means measuring the runtime of
  codes will be very unpredictable on it.

  Favor a "real" machine like a physical lab machine, laptop, or a
  remote login to apollo.cselabs.umn.edu.  To run the codes remotely,
  log in via the ssh tool as in

  ,----
  | > ssh kauf0095@apollo.cselabs.umn.edu
  `----

  Use your X.500 username/password to get access. All CSE labs machines
  share the same home directory so any code you download to Vole or a
  physical lab machine will be available on all machines.


Compiling and Timing
====================

  IMPORTANT: Use the provided Makefile to compile as in
  ,----
  | > make
  | gcc -Wall -g -Og -c superscalar_main.c		
  | gcc -Wall -g -Og -c superscalar_funcs.c		
  | gcc -Wall -g -Og -o superscalar_main superscalar_main.o superscalar_funcs.o		
  `----
  The compilation uses `-Og' (debug level optimization) which is
  necessary to stop the compiler from modifying some loops.

  This will produce the `superscalar_main' program which has the
  following usage:
  ,----
  | > ./superscalar_main
  | usage: ./superscalar_main <ALG> <MULT> <EXP>
  |   <MULT> and <ALG> are integers, iterates for MULT * 2^{EXP} iterations
  |   <ALG> is one of
  |           add1_sep : add 1 times in loop
  |           add2_sep : add 2 times in same loop; separate destinations
  |           add3_sep : add 3 times in same loop; separate destinations
  |          add2_same : add 2 times in same loop; same destinations
  |           mul1_sep : multiply 1 times in loop
  |           mul2_sep : multiply 2 times in same loop; separate destinations
  |           mul3_sep : multiply 3 times in same loop; separate destinations
  |          mul2_same : multiply 2 times in same loop; same destinations
  |  add1_then_mul_sep : add and multiply in different loops; separate destinations
  | add1_then_mul_same : add and multiply in different loops; same destinations
  |   add2_and_mul_sep : add twice and multiply in the same loop; separate destinations
  |  add2_and_mul_same : add twice and multiply in the same loop; same destination 
  `----

  Experiment with algorithm `add1_sep' and parameters `MULT' and `EXP'
  which control the number of iterations run. Experiment until you get a
  run time of about 1 second such as MULT=1 and EXP=30 on apollo.
  ,----
  | apollo> time ./superscalar_main add1_sep 1 30
  | add1_sep for 18 * 2^{27} = 2415919104 iterations... complete
  | 
  | real	0m1.071s
  | user	0m1.040s
  | sys	0m0.008s
  `----


PROBLEM 1: Addition
===================

(A) add1_sep / add2_sep / add3_sep
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Examine the source code in `superscalar_funcs.c' for the following
  algorithms.
  - add1_sep : add 1 times in loop
  - add2_sep : add 2 times in same loop; separate destinations
  - add3_sep : add 3 times in same loop; separate destinations
  Note that each does some additions in a loop. Time each of these WITH
  THE SAME MULT/EXP parameters and show your timings. Describe how the
  timings compare and speculate on why.

  Note that all of these involve incrementing a counter (`i++') so the
  number of additions is one greater than the algorithm name suggests.

~~~~~~~~~~~~~~~
add1_sep for 1 * 2^{30} = 1073741824 iterations... complete

real    0m0.538s
user    0m0.533s
sys     0m0.000s

normal amount of time

add2_sep for 1 * 2^{30} = 1073741824 iterations... complete

real    0m0.486s
user    0m0.479s
sys     0m0.000s

fast. more additions, throughput still good

add3_sep for 1 * 2^{30} = 1073741824 iterations... complete

real    0m0.707s
user    0m0.707s
sys     0m0.000s

more additions but throughput decreased.

(B) add2_sep / add2_same
~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the source code of the two algorithms below.
  - add1_sep : add 1 times in loop
  - add2_sep : add 2 times in same loop; separate destinations
  - add2_same : add 2 times in same loop; same destinations
  Note that the only difference between the add2_X algorithms is that
  the destination for the results.

  Compare timings for these and speculate on the reasons for any
  unexpected results.


~~~~~~~~~~~~~~~~~~~
add2_sep for 1 * 2^{30} = 1073741824 iterations... complete

real    0m0.486s
user    0m0.479s
sys     0m0.000s

add2_same for 1 * 2^{30} = 1073741824 iterations... complete

real    0m0.969s
user    0m0.968s
sys     0m0.001s

PROBLEM 2: Multiplication
=========================

(A) add1_sep / mul1_sep
~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - add1_sep : add 1 times in loop
  - mul1_sep : multiply 1 times in loop
  Time them on the same parameters and speculate on the timing
  differences.

~~~~~~~~~~~~~~~~~~~~~~~~
add1_sep for 1 * 2^{30} = 1073741824 iterations... complete

real    0m0.538s
user    0m0.533s
sys     0m0.000s

mul1_sep for 1 * 2^{30} = 1073741824 iterations... complete

real    0m1.413s
user    0m1.412s
sys     0m0.000s


(B) mul1_sep / mul2_sep / mul3_sep
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - mul1_sep : multiply 1 times in loop
  - mul2_sep : multiply 2 times in same loop; separate destinations
  - mul3_sep : multiply 3 times in same loop; separate destinations
  Time them on the same parameters and speculate on the timing
  differences.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mul1_sep for 1 * 2^{30} = 1073741824 iterations... complete

real    0m1.413s
user    0m1.412s
sys     0m0.000s

mul2_sep for 1 * 2^{30} = 1073741824 iterations... complete

real    0m1.414s
user    0m1.413s
sys     0m0.000s

mul3_sep for 1 * 2^{30} = 1073741824 iterations... complete

real    0m1.422s
user    0m1.419s
sys     0m0.000s

(C) mul1_sep / mul2_sep / mul2_same
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - mul1_sep : multiply 1 times in loop
  - mul2_sep : multiply 2 times in same loop; separate destinations
  - mul2_same : multiply 2 times in same loop; same destinations
  Time them on the same parameters and speculate on the timing
  differences.

~~~~~~~~~~~~~~~~~~~~~~~~~~~
mul2_sep for 1 * 2^{30} = 1073741824 iterations... complete

real    0m1.414s
user    0m1.413s
sys     0m0.000s

mul2_same for 1 * 2^{30} = 1073741824 iterations... complete

real    0m2.844s
user    0m2.841s
sys     0m0.000s


PROBLEM 3: Combined Addition/Multiplication
===========================================

(A) add1_then_mul_sep / add2_and_mul_sep
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - add1_then_mul_sep : add and multiply in different loops; separate
    destinations
  - add2_and_mul_sep : add twice and multiply in the same loop; separate
    destinations
  Note that each loop involves incrementing a counter so both of the
  above algorithms should do the same number of operations for N
  iterations:
  ---------------------------------------------
                      loop        total  total 
   Algorithm          incr  adds  adds   mults 
  ---------------------------------------------
   add1_then_mul_sep  2*N   1*N   3*N    N     
   add2_and_mul_sep   1*N   2*N   3*N    N     
  ---------------------------------------------

  Time these algorithms on the same parameters and speculate on the
  timing differences.

  Compare the timings to your earlier results for add1_sep and mul1_sep.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
add1_then_mul_sep for 1 * 2^{30} = 1073741824 iterations... complete

real    0m2.095s
user    0m2.031s
sys     0m0.044s


add2_and_mul_sep for 1 * 2^{30} = 1073741824 iterations... complete

real    0m1.417s
user    0m1.416s
sys     0m0.000s

(B) Table of Timings
~~~~~~~~~~~~~~~~~~~~

  Consider table of algorithm variants given below.  Part A of this
  question compared the algorithms in Col 1. Add their times into the
  table below under the 'User Time' column then time the other two
  algorithms to complete the table of timings. The table will be
  analyzed in the next part.

  --------------------------------------------------------------------------------------
                                     Col 1               User  Col 2               User 
          Loops / Locations          Separate Locations  Time  Same Locations      Time 
  --------------------------------------------------------------------------------------
   Row 1  Add/Mult, different loops  add1_then_mul_sep   0m1.818s  add1_then_mul_same  0m1.834s     
   Row 2  Add/and Mult, same loop    add2_and_mul_sep    0m1.288s  add2_and_mul_same   0m2.159s    
  --------------------------------------------------------------------------------------


(C) Table Analysis
~~~~~~~~~~~~~~~~~~

  Explain why the following observations can be made about the timing
  table from part B.

   Compare  Alg1                vs  Alg2                Reason 
  -------------------------------------------------------------
   Row 1    add1_then_mul_sep   =   add1_then_mul_same   although there are different location, it also uses different loops so it keeps the speed and throughput     
   Row 2    add2_and_mul_sep    <   add2_and_mul_same   by using the same location, it makes it do more work with memory which takes longer     
   Col 1    add1_then_mul_sep   >   add2_and_mul_sep    having separate location increases it just a little bit
   Col 2    add1_then_mul_same  <   add2_and_mul_sep    having the same loop and same location causes a decrease in throughput
