                           __________________

                            LAB 11 QUESTIONS
                           __________________


- Name: jack kraemer
- NetID: kraem098

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete the
lab.


PROBLEM 1: colmins_main.c
=========================

(A) Timing
~~~~~~~~~~

  Compile and run the provided `colmins_main' program as indicated
  below.

  ,----
  | > make
  | gcc -Wall -g -Og -c colmins_main.c		
  | gcc -Wall -g -Og -c colmins_funcs.c		
  | gcc -Wall -g -Og -c matvec_util.c
  | gcc -Wall -g -Og -o colmins_main colmins_main.o colmins_funcs.o matvec_util.o
  | 
  | > ./colmins_main 8000 16000
  `----

  Notice that the size of the matrix being used is quite large: 8000
  rows by 16000 columns. You may time other sizes but 8000x16000 is
  usually large enough to get beyond obvious cache effects on most
  machines.

  Run the program several times to ensure that you get a good sense of
  what it's normal behavior is like: there should be timing differences
  between the different functions reported on.

  Paste the timing results produced below for `./colmins_main 8000
  16000'

~~~~~~~~~~~~~
 col_mins1 CPU usage: 9.9400e-001 sec
     col_mins2 CPU usage: 1.0300e+000 sec
     col_mins3 CPU usage: 9.9800e-001 sec
     col_mins4 CPU usage: 2.5700e-001 sec
     col_mins5 CPU usage: 1.0800e-001 sec


(B) Tricks
~~~~~~~~~~

  Examine the source code for `colmins_main.c'.  Identify the technique
  that is used to avoid a large amount of repeated code to time the
  multiple functions.


~~~~~~~~~~~~~~~~~~
minfuncs_t funcs[] = {
    {"col_mins1",col_mins1},
    {"col_mins2",col_mins2},
    {"col_mins3",col_mins3},
    {"col_mins4",col_mins4},
    {"col_mins5",col_mins5},
    {NULL, NULL}
  };  
table is iterated over caling the right function reducing repeated code.



Problem 2: Comparisons in colmins_funcs.c
=========================================

(A) col_mins1 baseline
~~~~~~~~~~~~~~~~~~~~~~

  Examine the `col_mins1' function in `colmins_funcs.c' and describe the
  basic approach it uses to solve the problem of finding the minimum of
  each column of a matrix.
  - What pattern of access is used? Is this advantageous for the layout
    of the matrix?
  - What local variables are used versus main memory gets/sets?

~~~~~~~~~~~~~~~~~~~

col_min1 iterates down each column so row-major will not utilize cache well.

not many local variables used, lots a calls to MGET() and so on. uses more main memory.


(B) col_mins2 Comparison
~~~~~~~~~~~~~~~~~~~~~~~~

  Examine the differences between `col_mins1' and `col_mins2'.
  Particularly comment on
  - Any differences in memory access pattern
  - Any differences in use of local variables/main memory
  - Any differences in speed

~~~~~~~~~~~~~~~~~~~~~~~
similar to col_min1 iterates over columns.

uses some local variables so fewer main memoruy accesses

runs about the same speed, maybe a little faster.

(C) col_mins3 Comparison
~~~~~~~~~~~~~~~~~~~~~~~~

  `col_mins3' implements an optimization called loop unrolling.  In this
  technique, rather than iterate by single increments, larger steps are
  taken. Since each iteration uses multiple local variables to store
  partial results that must eventually be combined. All this is meant to
  allow the processor to execute more instructions in sequence before
  looping back which may enable more efficient pipelined and superscalar
  operations.

  Examine the differences between `col_mins2' and `col_mins3'.
  Particularly comment on
  - Any differences in memory access pattern
  - Any differences in use of local variables/main memory
  - Any differences in speed that might be due to the new optimizations

~~~~~~~~~~~~~~~~~~~
Still using columns so memory access is the same

more local variables to allow more pipelining.

speed improvements so time reduction.

(D) col_mins4 Comparison
~~~~~~~~~~~~~~~~~~~~~~~~

  `col_mins4' also loop unrolling but in a different way than
  `col_mins3'.

  Examine the differences between `col_mins3' and `col_mins4'.
  Particularly comment on
  - What loops are "unrolled" in each and how does this affect the
    remaining code?
  - Any differences in memory access pattern
  - Any differences in use of local variables/main memory
  - Any differences in speed that might be due to the new optimizations

~~~~~~~~~~~~~~~~~~~~~
this unrolls outer row loop so columns are examined at the same time
col_min3 did inner column

favors cache by using different columns in same row.

same amount of local variabels as 3

apollo struggles with outer loop unrolls but laptops lead to better performance with it


(E) col_mins5 Comparison: The Real Lesson
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  `col_mins5' is inherently different than all of the other routines.
  Examine its structure carefully and ensure that you understand it as
  it may prove useful in an assignment.  Particularly comment on
  - Any differences in memory access pattern from the others
  - Any differences in use of local variables/main memory
  - Any differences in speed that might be due to the new optimizations

~~~~~~~~~~~~~~~~~
uses row based access to hit cace more frequently than column based approach

not many local variables, uses one to reduce calls to MGET()

definitely the fastest approach because of better memory access pattern.
